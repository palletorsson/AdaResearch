[gd_scene load_steps=8 format=3 uid="uid://g7p2qfp64igq4"]

[ext_resource type="PackedScene" uid="uid://ziyr3bqgeimdz" path="res://addons/godot-xr-tools/staging/scene_base.tscn" id="1_scene_base"]

[sub_resource type="GDScript" id="GDScript_1"]
script/source = "extends Node

func _ready():
	print(\"üöÄ VR Test Scene _ready() called\")
	
	# Check what parent scene we're in
	var parent = get_parent()
	print(\"   Parent scene: %s\" % (parent.name if parent else \"none\"))
	
	# Add small delay to let VR initialization complete
	await get_tree().process_frame
	await get_tree().process_frame
	
	print(\"=== VR Test Scene Ready ===\")
	
	# Check environment components
	var world_env = get_node_or_null(\"../WorldEnvironment\")
	if world_env:
		print(\"‚úÖ WorldEnvironment found\")
	else:
		print(\"‚ùå WorldEnvironment not found\")
	
	var light = get_node_or_null(\"../DirectionalLight3D\")
	if light:
		print(\"‚úÖ DirectionalLight3D found, energy: %s\" % light.light_energy)
	else:
		print(\"‚ùå DirectionalLight3D not found\")
	
	var ground = get_node_or_null(\"../GroundPlane\")
	if ground:
		print(\"‚úÖ GroundPlane found\")
	else:
		print(\"‚ùå GroundPlane not found\")
	
	# Check XR interface status
	var xr_interface = XRServer.get_primary_interface()
	if xr_interface:
		print(\"‚úÖ XR Interface: %s, Initialized: %s\" % [xr_interface.get_name(), xr_interface.is_initialized()])
	else:
		print(\"‚ùå No XR interface found\")
	
	# Check autoloads
	var gamemanager = get_node_or_null(\"/root/GameManager\")
	if gamemanager:
		print(\"‚úÖ GameManager autoload available\")
	else:
		print(\"‚ùå GameManager autoload not found\")
	
	var map_manager = get_node_or_null(\"/root/MapProgressionManager\")
	if map_manager:
		print(\"‚úÖ MapProgressionManager autoload available\")
	else:
		print(\"‚ùå MapProgressionManager autoload not found\")
	
	print(\"=== Scene initialization complete ===\")
	
	# Notify staging system that we're ready
	var staging = get_node_or_null(\"/root/VRStaging\")
	if staging:
		print(\"üì¢ Notifying VRStaging that scene is ready\")
	else:
		print(\"‚ö†Ô∏è VRStaging not found in scene tree\")
"

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_1"]
sky_top_color = Color(0.1, 0.3, 0.8, 1)
sky_horizon_color = Color(0.6, 0.7, 0.9, 1)
ground_bottom_color = Color(0.1, 0.3, 0.1, 1)
ground_horizon_color = Color(0.4, 0.6, 0.4, 1)

[sub_resource type="Sky" id="Sky_1"]
sky_material = SubResource("ProceduralSkyMaterial_1")

[sub_resource type="Environment" id="Environment_1"]
background_mode = 2
sky = SubResource("Sky_1")
ambient_light_source = 3
ambient_light_color = Color(1, 1, 1, 1)
ambient_light_energy = 0.3

[sub_resource type="BoxMesh" id="BoxMesh_1"]
size = Vector3(20, 0.2, 20)

[sub_resource type="BoxShape3D" id="BoxShape3D_1"]
size = Vector3(20, 0.2, 20)

[node name="SimpleVRTest" instance=ExtResource("1_scene_base")]
script = SubResource("GDScript_1")

[node name="WorldEnvironment" type="WorldEnvironment" parent="." index="0"]
environment = SubResource("Environment_1")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="." index="1"]
transform = Transform3D(0.707107, -0.5, 0.5, 0, 0.707107, 0.707107, -0.707107, -0.5, 0.5, 0, 5, 0)
shadow_enabled = true

[node name="GroundPlane" type="StaticBody3D" parent="." index="2"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="GroundPlane" index="0"]
mesh = SubResource("BoxMesh_1")

[node name="CollisionShape3D" type="CollisionShape3D" parent="GroundPlane" index="1"]
shape = SubResource("BoxShape3D_1")

[node name="TestLabel" type="Label3D" parent="." index="3"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, -2)
text = "üéâ VR Working! 
‚úÖ All systems operational
ü•Ω Welcome to Ada Research VR"
font_size = 64
