# VectorsInfoBoard.gd
# Info board for Vectors concepts
extends AlgorithmInfoBoardBase

# Preload visualization
const VectorsVis = preload("res://commons/infoboards_3d/boards/Vectors/VectorsVisualization.gd")

func initialize_content() -> void:
	"""Set up content pages for Vectors"""
	board_title = "Vectors"
	category_color = Color(0.6, 0.8, 0.9, 1.0)  # Light blue for mathematics

	page_content = [
		{
			"title": "Vectors: Introduction",
			"text": [
				"Vectors are mathematical objects that represent both magnitude (length) and direction.",
				"",
				"In programming, vectors are used to represent positions, velocities, accelerations, and forces.",
				"They allow us to model motion and physical interactions in 2D and 3D space.",
				"",
				"This info board will explain vector operations and their applications in creative coding and simulations.",
				"We'll explore vector basics, addition, multiplication, and how to use them to create physics-based animations.",
				"",
				"CODE EXAMPLE:",
				"",
				"# Vector declaration in Godot",
				"var position = Vector2(100, 200)  # x=100, y=200",
				"var velocity = Vector2(5, -3)     # Moving right and up",
				"",
				"# Basic vector operations",
				"position += velocity  # Vector addition",
				"velocity *= 0.98      # Vector scaling (applying friction)",
				"",
				"# Get vector properties",
				"var speed = velocity.length()        # Magnitude",
				"var direction = velocity.normalized() # Direction (unit vector)",
				"",
				"The visualization shows a vector in circular motion,",
				"displaying its position and velocity vectors in real-time."
			],
			"visualization": "intro"
		},
		{
			"title": "Vector Addition and Subtraction",
			"text": [
				"Vector addition combines two or more vectors by adding their corresponding components.",
				"",
				"Geometrically, it can be visualized using:",
				"• The 'head-to-tail' method",
				"• The parallelogram rule",
				"",
				"Vector subtraction (A - B) gives the displacement vector from B to A.",
				"",
				"These operations are fundamental for:",
				"• Calculating resultant forces",
				"• Finding relative positions",
				"• Computing motion paths",
				"",
				"CODE EXAMPLE:",
				"",
				"# Vector addition in Godot",
				"var force1 = Vector2(10, 5)   # First force",
				"var force2 = Vector2(-3, 8)   # Second force",
				"",
				"# Calculate resultant force",
				"var resultant = force1 + force2",
				"",
				"# Vector subtraction",
				"var object_pos = Vector2(100, 100)",
				"var target_pos = Vector2(200, 150)",
				"",
				"# Direction from object to target",
				"var direction = target_pos - object_pos",
				"",
				"# Distance between objects",
				"var distance = direction.length()",
				"",
				"The animation demonstrates both methods of vector addition."
			],
			"visualization": "addition"
		},
		{
			"title": "Vector Multiplication and Normalization",
			"text": [
				"Vectors can be multiplied by scalars (regular numbers) to change their magnitude without changing direction.",
				"",
				"Multiplying a vector by 2 doubles its length while keeping the same direction.",
				"",
				"NORMALIZATION:",
				"Creates a unit vector (length of 1) that preserves only the direction information.",
				"",
				"DOT PRODUCT:",
				"The dot product of two vectors produces a scalar value related to the angle between them.",
				"• Returns 1 if vectors are aligned",
				"• Returns 0 if vectors are perpendicular",
				"• Returns -1 if vectors are opposite",
				"",
				"CODE EXAMPLE:",
				"",
				"# Scalar multiplication",
				"var velocity = Vector2(3, 4)",
				"var speed_factor = 2.5",
				"velocity *= speed_factor  # Increase speed",
				"",
				"# Normalization (unit vector)",
				"var direction = (target - position).normalized()",
				"",
				"# Moving at consistent speed toward target",
				"var speed = 5.0",
				"velocity = direction * speed",
				"",
				"# Dot product (returns a scalar)",
				"var forward = Vector2(0, -1)  # Forward direction",
				"var to_target = (target - position).normalized()",
				"var alignment = forward.dot(to_target)",
				"# 1=aligned, 0=perpendicular, -1=opposite",
				"",
				"The visualization shows scalar multiplication, normalization, and dot product."
			],
			"visualization": "multiplication"
		},
		{
			"title": "Forces and Motion",
			"text": [
				"Vectors are perfect for simulating physical forces and resulting motion.",
				"",
				"NEWTON'S SECOND LAW:",
				"Force = Mass × Acceleration",
				"or",
				"Acceleration = Force / Mass",
				"",
				"By accumulating forces and updating position based on velocity,",
				"we can create realistic physics simulations.",
				"",
				"COMMON FORCES:",
				"• Gravity - constant downward force",
				"• Friction - opposes motion",
				"• Spring forces - Hooke's law",
				"• Attraction/Repulsion - between objects",
				"",
				"CODE EXAMPLE:",
				"",
				"# Simple physics system",
				"class Particle:",
				"    var position = Vector2.ZERO",
				"    var velocity = Vector2.ZERO",
				"    var acceleration = Vector2.ZERO",
				"    var mass = 1.0",
				"    ",
				"    func apply_force(force):",
				"        # F = ma, so a = F/m",
				"        acceleration += force / mass",
				"    ",
				"    func update(delta):",
				"        # Update velocity and position",
				"        velocity += acceleration * delta",
				"        position += velocity * delta",
				"        ",
				"        # Reset acceleration",
				"        acceleration = Vector2.ZERO",
				"        ",
				"        # Apply friction",
				"        velocity *= 0.99",
				"",
				"The animation shows particles responding to attractors and repellers."
			],
			"visualization": "forces"
		},
		{
			"title": "Vector Fields and Flow",
			"text": [
				"Vector fields assign a vector to each point in space,",
				"creating flow patterns that particles can follow.",
				"",
				"They can be used to create complex, naturalistic movement patterns.",
				"",
				"APPLICATIONS:",
				"• Simulating fluids and water flow",
				"• Crowd movement simulation",
				"• Wind effects in games",
				"• Dynamic terrain effects",
				"• Particle system behaviors",
				"",
				"Vector fields can be generated using:",
				"• Noise functions (Perlin, Simplex)",
				"• Mathematical formulas (circular, spiral)",
				"• Custom algorithms",
				"• Real-world data",
				"",
				"CODE EXAMPLE:",
				"",
				"# Creating a circular vector field",
				"func get_field_vector(position):",
				"    var center = Vector2(width/2, height/2)",
				"    var offset = position - center",
				"    ",
				"    # Create perpendicular vector for circular motion",
				"    var perpendicular = Vector2(-offset.y, offset.x).normalized()",
				"    ",
				"    # Scale by distance from center",
				"    var distance = offset.length()",
				"    var strength = max(0, 1 - distance/200)",
				"    ",
				"    return perpendicular * strength * 5.0",
				"",
				"# Apply field force to all particles",
				"for particle in particles:",
				"    var field_force = get_field_vector(particle.position)",
				"    particle.apply_force(field_force)",
				"",
				"The visualization cycles through different field types:",
				"circular, noise-based, and sink/source fields."
			],
			"visualization": "fields"
		}
	]

func create_visualization(vis_type: String) -> Control:
	"""Create appropriate visualization for the given type"""
	var vis = Control.new()
	vis.set_script(VectorsVis)
	vis.visualization_type = vis_type
	vis.custom_minimum_size = Vector2(400, 400)
	return vis
