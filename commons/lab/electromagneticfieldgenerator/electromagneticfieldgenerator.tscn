[gd_scene load_steps=16 format=3 uid="uid://fx28li2e78mm"]

[sub_resource type="GDScript" id="GDScript_1"]
script/source = "extends Node3D

@onready var field_generator = $GeneratorCore/FieldCore
@onready var tesla_coils = [$GeneratorCore/TeslaCoil1, $GeneratorCore/TeslaCoil2, $GeneratorCore/TeslaCoil3]
@onready var magnetic_rings = [$GeneratorCore/MagneticRing1, $GeneratorCore/MagneticRing2]
@onready var field_visualization = $FieldVisualization
@onready var control_station = $ControlStation
@onready var power_conduits = [$GeneratorCore/PowerConduit1, $GeneratorCore/PowerConduit2, $GeneratorCore/PowerConduit3, $GeneratorCore/PowerConduit4]

var field_strength = 0.0
var field_frequency = 50.0  # Hz
var field_polarity = 1  # 1 or -1
var generator_active = false
var electromagnetic_state = 'stable'  # stable, charging, overload

signal field_activated
signal electromagnetic_pulse
signal field_overload
signal polarity_reversed

func _ready():
	setup_em_generator()
	initialize_field_systems()

func setup_em_generator():
	add_to_group('lab_equipment')
	add_to_group('electromagnetic_devices')
	add_to_group('high_power_systems')
	
	# Set initial field visualization
	field_visualization.material_override.albedo_color.a = 0.0

func initialize_field_systems():
	print('⚡ EM GENERATOR: Electromagnetic field systems initializing...')
	
	# Tesla coil animations at different phases
	for i in range(tesla_coils.size()):
		var coil = tesla_coils[i]
		var phase_offset = i * (TAU / 3.0)  # 120 degree phase separation
		
		var coil_tween = create_tween()
		coil_tween.set_loops()
		coil_tween.tween_method(animate_tesla_coil.bind(coil, phase_offset), 0.0, TAU, 2.0)
	
	# Magnetic ring counter-rotation
	var ring1_tween = create_tween()
	ring1_tween.set_loops()
	ring1_tween.tween_property(magnetic_rings[0], 'rotation_degrees:y', 360.0, 4.0)
	
	var ring2_tween = create_tween()
	ring2_tween.set_loops()
	ring2_tween.tween_property(magnetic_rings[1], 'rotation_degrees:y', -360.0, 3.0)
	
	# Power conduit energy flow
	animate_power_conduits()

func animate_tesla_coil(coil: Node3D, phase_offset: float, time: float):
	var intensity = sin(time + phase_offset) * 0.5 + 0.5
	coil.get_child(0).light_energy = intensity * 2.0

func animate_power_conduits():
	for i in range(power_conduits.size()):
		var conduit = power_conduits[i]
		var delay = i * 0.2
		
		var conduit_tween = create_tween()
		conduit_tween.set_loops()
		conduit_tween.tween_delay(delay)
		conduit_tween.tween_property(conduit, 'light_energy', 0.1, 0.3)
		conduit_tween.tween_property(conduit, 'light_energy', 1.8, 0.2)
		conduit_tween.tween_property(conduit, 'light_energy', 0.1, 1.0)

func _process(delta):
	if generator_active:
		field_strength += delta * 2.0
		
		# Update electromagnetic field visuals
		update_field_visualization()
		
		# Check for overload conditions
		if field_strength > 10.0 and electromagnetic_state != 'overload':
			trigger_field_overload()

func update_field_visualization():
	# Field intensity visualization
	var field_alpha = clamp(field_strength / 8.0, 0.0, 0.6)
	field_visualization.material_override.albedo_color.a = field_alpha
	
	# Field pulsing effect
	var pulse_scale = 1.0 + sin(field_strength * field_frequency / 10.0) * 0.2
	field_visualization.scale = Vector3.ONE * pulse_scale
	
	# Color changes based on polarity
	var field_color = Color.BLUE if field_polarity > 0 else Color.RED
	field_visualization.material_override.emission = field_color

func _on_area_3d_body_entered(body):
	if body.is_in_group('player'):
		activate_field_generator()

func activate_field_generator():
	if generator_active:
		cycle_field_mode()
		return
		
	generator_active = true
	electromagnetic_state = 'charging'
	print('⚡ EM GENERATOR: Activating electromagnetic field - Frequency: %.1f Hz' % field_frequency)
	emit_signal('field_activated')
	
	# Field buildup sequence
	var activation_tween = create_tween()
	activation_tween.tween_method(charge_field_capacitors, 0.0, 5.0, 4.0)

func charge_field_capacitors(charge: float):
	field_strength = charge
	
	# Visual feedback during charging
	var core_intensity = charge / 5.0 * 3.0
	field_generator.get_child(0).light_energy = core_intensity
	
	# Tesla coil activity increases
	for coil in tesla_coils:
		coil.get_child(0).omni_range = 2.0 + charge * 0.6

func cycle_field_mode():
	match electromagnetic_state:
		'stable':
			increase_frequency()
		'charging':
			reverse_polarity()
		'overload':
			emergency_shutdown()

func increase_frequency():
	field_frequency *= 2.0
	if field_frequency > 400.0:
		field_frequency = 50.0  # Reset to base frequency
	
	print('⚡ EM GENERATOR: Frequency adjusted to %.1f Hz' % field_frequency)
	
	# Visual frequency change
	var freq_tween = create_tween()
	freq_tween.tween_property(field_visualization, 'material_override:emission_energy', 3.0, 0.2)
	freq_tween.tween_property(field_visualization, 'material_override:emission_energy', 1.0, 0.8)

func reverse_polarity():
	field_polarity *= -1
	print('⚡ EM GENERATOR: Magnetic polarity reversed to %s' % ('North' if field_polarity > 0 else 'South'))
	emit_signal('polarity_reversed', field_polarity)
	
	# Polarity reversal effect
	var polarity_tween = create_tween()
	polarity_tween.tween_property(field_visualization, 'scale', Vector3(0.1, 0.1, 0.1), 0.3)
	polarity_tween.tween_property(field_visualization, 'scale', Vector3(1.5, 1.5, 1.5), 0.4)
	polarity_tween.tween_property(field_visualization, 'scale', Vector3.ONE, 0.3)

func trigger_field_overload():
	electromagnetic_state = 'overload'
	print('⚠️ EM GENERATOR: Field overload detected - Electromagnetic pulse imminent!')
	emit_signal('field_overload')
	
	# Overload warning sequence
	var overload_tween = create_tween()
	overload_tween.set_loops(5)
	overload_tween.tween_property(field_visualization, 'material_override:emission', Color.WHITE, 0.1)
	overload_tween.tween_property(field_visualization, 'material_override:emission', Color.RED, 0.1)
	
	# Trigger EMP after warning period
	get_tree().create_timer(3.0).timeout.connect(trigger_emp)

func trigger_emp():
	print('💥 ELECTROMAGNETIC PULSE GENERATED!')
	emit_signal('electromagnetic_pulse')
	
	# Massive field expansion
	var emp_tween = create_tween()
	emp_tween.tween_property(field_visualization, 'scale', Vector3(10.0, 10.0, 10.0), 0.5)
	emp_tween.tween_property(field_visualization, 'material_override:albedo_color:a', 0.0, 0.5)
	
	# All lights flicker and dim
	flicker_all_systems()
	
	# Auto-shutdown after EMP
	get_tree().create_timer(2.0).timeout.connect(emergency_shutdown)

func flicker_all_systems():
	# Flicker all electromagnetic systems
	var systems = tesla_coils + power_conduits + [field_generator]
	
	for system in systems:
		if system.has_method('get_child') and system.get_child_count() > 0:
			var light = system.get_child(0)
			if light is Light3D:
				var flicker_tween = create_tween()
				flicker_tween.set_loops(8)
				flicker_tween.tween_property(light, 'light_energy', 0.0, 0.05)
				flicker_tween.tween_property(light, 'light_energy', 2.0, 0.05)

func emergency_shutdown():
	print('🛑 EM GENERATOR: Emergency shutdown initiated')
	generator_active = false
	electromagnetic_state = 'stable'
	field_strength = 0.0
	
	# Gradual system shutdown
	var shutdown_tween = create_tween()
	shutdown_tween.tween_property(field_visualization, 'material_override:albedo_color:a', 0.0, 2.0)
	shutdown_tween.tween_property(field_generator.get_child(0), 'light_energy', 0.0, 2.0)
	
	# Reset after cooldown period
	get_tree().create_timer(5.0).timeout.connect(reset_generator)

func reset_generator():
	electromagnetic_state = 'stable'
	field_frequency = 50.0
	field_polarity = 1
	print('⚡ EM GENERATOR: Systems reset - Ready for next activation')

func modulate_field(new_frequency: float, new_strength: float):
	field_frequency = clamp(new_frequency, 10.0, 1000.0)
	field_strength = clamp(new_strength, 0.0, 8.0)  # Safe operating range
	
	print('⚡ EM GENERATOR: Field modulated - %.1f Hz at %.1f%% power' % [field_frequency, (field_strength/8.0)*100])
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1"]
albedo_color = Color(0.15, 0.15, 0.2, 1)
metallic = 0.9
roughness = 0.1

[sub_resource type="CylinderMesh" id="CylinderMesh_1"]
top_radius = 1.5
bottom_radius = 1.5
height = 0.5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_2"]
albedo_color = Color(0.5, 0.8, 1, 1)
emission_enabled = true
emission = Color(0, 0.5, 1, 1)
emission_energy_multiplier = 2.0

[sub_resource type="SphereMesh" id="SphereMesh_1"]
radius = 0.4
height = 0.8

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4"]
albedo_color = Color(0, 0.3, 0.8, 1)
metallic = 0.8
roughness = 0.2

[sub_resource type="CylinderMesh" id="CylinderMesh_2"]
top_radius = 0.1
bottom_radius = 0.15

[sub_resource type="TorusMesh" id="TorusMesh_1"]
inner_radius = 1.8
outer_radius = 2.0

[sub_resource type="TorusMesh" id="TorusMesh_2"]
inner_radius = 2.3
outer_radius = 2.5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_6"]
albedo_color = Color(1, 0.5, 0, 1)
emission_enabled = true
emission = Color(1, 0.3, 0, 1)
emission_energy_multiplier = 1.5

[sub_resource type="CylinderMesh" id="CylinderMesh_3"]
top_radius = 0.05
bottom_radius = 0.05
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_5"]
transparency = 1
albedo_color = Color(0, 0.5, 1, 0.3)
emission_enabled = true
emission = Color(0, 0.3, 1, 1)

[sub_resource type="SphereMesh" id="SphereMesh_2"]
radius = 4.0
height = 8.0

[sub_resource type="BoxMesh" id="BoxMesh_1"]
size = Vector3(1, 1.5, 0.5)

[sub_resource type="BoxShape3D" id="BoxShape3D_1"]
size = Vector3(12, 8, 12)

[node name="ElectromagneticFieldGenerator" type="Node3D"]
script = SubResource("GDScript_1")

[node name="GeneratorCore" type="Node3D" parent="."]

[node name="GeneratorBase" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.25, 0)
material_override = SubResource("StandardMaterial3D_1")
mesh = SubResource("CylinderMesh_1")

[node name="FieldCore" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
material_override = SubResource("StandardMaterial3D_2")
mesh = SubResource("SphereMesh_1")

[node name="CoreLight" type="OmniLight3D" parent="GeneratorCore/FieldCore"]
light_color = Color(0, 0.8, 1, 1)
light_energy = 0.0
omni_range = 6.0

[node name="TeslaCoil1" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.5, 1.5, 0)
material_override = SubResource("StandardMaterial3D_4")
mesh = SubResource("CylinderMesh_2")

[node name="CoilLight1" type="OmniLight3D" parent="GeneratorCore/TeslaCoil1"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.2, 0)
light_energy = 0.0
omni_range = 2.0

[node name="TeslaCoil2" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(-0.5, 0, 0.866025, 0, 1, 0, -0.866025, 0, -0.5, -1.25, 1.5, 2.165)
material_override = SubResource("StandardMaterial3D_4")
mesh = SubResource("CylinderMesh_2")

[node name="CoilLight2" type="OmniLight3D" parent="GeneratorCore/TeslaCoil2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.2, 0)
light_energy = 0.0
omni_range = 2.0

[node name="TeslaCoil3" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(-0.5, 0, -0.866025, 0, 1, 0, 0.866025, 0, -0.5, -1.25, 1.5, -2.165)
material_override = SubResource("StandardMaterial3D_4")
mesh = SubResource("CylinderMesh_2")

[node name="CoilLight3" type="OmniLight3D" parent="GeneratorCore/TeslaCoil3"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.2, 0)
light_energy = 0.0
omni_range = 2.0

[node name="MagneticRing1" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
material_override = SubResource("StandardMaterial3D_4")
mesh = SubResource("TorusMesh_1")

[node name="MagneticRing2" type="MeshInstance3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
material_override = SubResource("StandardMaterial3D_4")
mesh = SubResource("TorusMesh_2")

[node name="PowerConduit1" type="OmniLight3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3, 0.5, 0)
light_color = Color(1, 0.5, 0, 1)
light_energy = 0.1
omni_range = 1.5

[node name="Conduit1Visual" type="MeshInstance3D" parent="GeneratorCore/PowerConduit1"]
material_override = SubResource("StandardMaterial3D_6")
mesh = SubResource("CylinderMesh_3")

[node name="PowerConduit2" type="OmniLight3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3, 0.5, 0)
light_color = Color(1, 0.5, 0, 1)
light_energy = 0.1
omni_range = 1.5

[node name="Conduit2Visual" type="MeshInstance3D" parent="GeneratorCore/PowerConduit2"]
material_override = SubResource("StandardMaterial3D_6")
mesh = SubResource("CylinderMesh_3")

[node name="PowerConduit3" type="OmniLight3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 3)
light_color = Color(1, 0.5, 0, 1)
light_energy = 0.1
omni_range = 1.5

[node name="Conduit3Visual" type="MeshInstance3D" parent="GeneratorCore/PowerConduit3"]
material_override = SubResource("StandardMaterial3D_6")
mesh = SubResource("CylinderMesh_3")

[node name="PowerConduit4" type="OmniLight3D" parent="GeneratorCore"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, -3)
light_color = Color(1, 0.5, 0, 1)
light_energy = 0.1
omni_range = 1.5

[node name="Conduit4Visual" type="MeshInstance3D" parent="GeneratorCore/PowerConduit4"]
material_override = SubResource("StandardMaterial3D_6")
mesh = SubResource("CylinderMesh_3")

[node name="FieldVisualization" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
material_override = SubResource("StandardMaterial3D_5")
mesh = SubResource("SphereMesh_2")

[node name="ControlStation" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4, 0.75, 0)
material_override = SubResource("StandardMaterial3D_1")
mesh = SubResource("BoxMesh_1")

[node name="InteractionArea" type="Area3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="InteractionArea"]
shape = SubResource("BoxShape3D_1")
