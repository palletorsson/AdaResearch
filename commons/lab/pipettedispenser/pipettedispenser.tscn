[gd_scene load_steps=13 format=3 uid="uid://8dvacnuvsp8a4"]

[sub_resource type="GDScript" id="GDScript_1"]
script/source = "extends Node3D

@onready var pipette_body = $PipetteStand/PipetteBody
@onready var plunger = $PipetteStand/PipetteBody/Plunger
@onready var tip_holder = $PipetteStand/PipetteBody/TipHolder
@onready var volume_display = $PipetteStand/VolumeDisplay
@onready var tip_ejector = $PipetteStand/TipEjector

var current_volume = 100.0  # μL
var max_volume = 1000.0
var min_volume = 0.5
var has_tip = true
var is_calibrated = true

signal volume_dispensed
signal tip_attached
signal tip_ejected
signal calibration_drift

func _ready():
	setup_pipette_dispenser()
	start_volume_monitoring()

func setup_pipette_dispenser():
	add_to_group('desk_equipment')
	add_to_group('precision_tools')
	
	print('💉 PIPETTE: Precision liquid handling device ready')

func start_volume_monitoring():
	var monitor_timer = Timer.new()
	monitor_timer.wait_time = 1.0
	monitor_timer.timeout.connect(update_volume_display)
	monitor_timer.autostart = true
	add_child(monitor_timer)

func update_volume_display():
	# Display current volume setting
	var volume_color = get_volume_color(current_volume)
	volume_display.material_override.emission = volume_color
	
	# Brightness based on precision
	var precision_factor = clamp(current_volume / max_volume, 0.3, 1.0)
	volume_display.material_override.emission_energy = precision_factor

func get_volume_color(volume: float) -> Color:
	if volume < 10.0:
		return Color.RED      # Ultra-low volume
	elif volume < 50.0:
		return Color.ORANGE   # Low volume
	elif volume < 200.0:
		return Color.YELLOW   # Medium volume
	else:
		return Color.GREEN    # High volume

func _on_area_3d_body_entered(body):
	if body.is_in_group('player'):
		dispense_sample()

func dispense_sample():
	if not has_tip:
		print('⚠️ PIPETTE: No tip attached - Cannot dispense')
		return
	
	if not is_calibrated:
		print('⚠️ PIPETTE: Calibration required for accurate dispensing')
		emit_signal('calibration_drift')
		return
	
	print('💉 PIPETTE: Dispensing %.1f μL sample' % current_volume)
	emit_signal('volume_dispensed', current_volume)
	
	# Plunger animation
	var dispense_tween = create_tween()
	dispense_tween.tween_property(plunger, 'position:y', -0.01, 0.3)
	dispense_tween.tween_property(plunger, 'position:y', 0.0, 0.5)

func adjust_volume(new_volume: float):
	current_volume = clamp(new_volume, min_volume, max_volume)
	print('💉 PIPETTE: Volume adjusted to %.1f μL' % current_volume)
	
	# Visual feedback for volume adjustment
	var adjust_tween = create_tween()
	adjust_tween.tween_property(volume_display, 'material_override:emission_energy', 2.0, 0.2)
	adjust_tween.tween_property(volume_display, 'material_override:emission_energy', 1.0, 0.8)

func eject_tip():
	if not has_tip:
		print('💉 PIPETTE: No tip to eject')
		return
	
	has_tip = false
	print('💉 PIPETTE: Tip ejected')
	emit_signal('tip_ejected')
	
	# Hide tip and animate ejector
	tip_holder.visible = false
	var eject_tween = create_tween()
	eject_tween.tween_property(tip_ejector, 'position:y', 0.02, 0.2)
	eject_tween.tween_property(tip_ejector, 'position:y', 0.0, 0.3)

func attach_tip():
	if has_tip:
		print('💉 PIPETTE: Tip already attached')
		return
	
	has_tip = true
	tip_holder.visible = true
	print('💉 PIPETTE: New tip attached')
	emit_signal('tip_attached')
	
	# Visual attachment confirmation
	var attach_tween = create_tween()
	attach_tween.tween_property(tip_holder, 'scale', Vector3(1.2, 1.2, 1.2), 0.2)
	attach_tween.tween_property(tip_holder, 'scale', Vector3(1.0, 1.0, 1.0), 0.3)

func perform_calibration():
	print('💉 PIPETTE: Performing calibration check...')
	is_calibrated = false
	
	# Calibration sequence
	var cal_tween = create_tween()
	cal_tween.tween_property(plunger, 'position:y', -0.02, 1.0)
	cal_tween.tween_property(plunger, 'position:y', 0.0, 1.0)
	cal_tween.tween_callback(calibration_complete)

func calibration_complete():
	is_calibrated = true
	print('✅ PIPETTE: Calibration verified - Accuracy within specifications')

func aspirate_liquid(source_description: String):
	if not has_tip:
		print('⚠️ PIPETTE: No tip attached for aspiration')
		return
	
	print('💉 PIPETTE: Aspirating %.1f μL from %s' % [current_volume, source_description])
	
	# Aspiration animation (reverse of dispense)
	var aspirate_tween = create_tween()
	aspirate_tween.tween_property(plunger, 'position:y', 0.01, 0.5)
	aspirate_tween.tween_property(plunger, 'position:y', 0.0, 0.3)

func multi_dispense(num_aliquots: int):
	if not has_tip or num_aliquots <= 0:
		return
	
	var aliquot_volume = current_volume / num_aliquots
	print('💉 PIPETTE: Multi-dispensing %d aliquots of %.1f μL each' % [num_aliquots, aliquot_volume])
	
	# Sequential dispensing animation
	for i in range(num_aliquots):
		var delay_tween = create_tween()
		delay_tween.tween_delay(i * 0.8)
		delay_tween.tween_property(plunger, 'position:y', -0.008, 0.2)
		delay_tween.tween_property(plunger, 'position:y', 0.0, 0.3)
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1"]
albedo_color = Color(0.8, 0.85, 0.9, 1)
metallic = 0.7
roughness = 0.3

[sub_resource type="BoxMesh" id="BoxMesh_1"]
size = Vector3(0.08, 0.05, 0.06)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_2"]
albedo_color = Color(0.9, 0.9, 0.95, 1)
metallic = 0.8
roughness = 0.2

[sub_resource type="CylinderMesh" id="CylinderMesh_1"]
top_radius = 0.012
bottom_radius = 0.012
height = 0.12

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_5"]
albedo_color = Color(1, 0.5, 0, 1)
metallic = 0.6
roughness = 0.4

[sub_resource type="CylinderMesh" id="CylinderMesh_2"]
top_radius = 0.008
bottom_radius = 0.008
height = 0.02

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3"]
transparency = 1
albedo_color = Color(1, 1, 0.8, 0.9)
roughness = 0.1

[sub_resource type="CylinderMesh" id="CylinderMesh_3"]
top_radius = 0.004
bottom_radius = 0.002
height = 0.025

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4"]
albedo_color = Color(0, 1, 0.5, 1)
emission_enabled = true
emission = Color(0, 0.8, 0.3, 1)

[sub_resource type="BoxMesh" id="BoxMesh_2"]
size = Vector3(0.05, 0.02, 0.01)

[sub_resource type="BoxShape3D" id="BoxShape3D_1"]
size = Vector3(0.2, 0.25, 0.15)

[node name="PipetteDispenser" type="Node3D"]
script = SubResource("GDScript_1")

[node name="PipetteStand" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.025, 0)
material_override = SubResource("StandardMaterial3D_1")
mesh = SubResource("BoxMesh_1")

[node name="PipetteBody" type="MeshInstance3D" parent="PipetteStand"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.085, 0)
material_override = SubResource("StandardMaterial3D_2")
mesh = SubResource("CylinderMesh_1")

[node name="Plunger" type="MeshInstance3D" parent="PipetteStand/PipetteBody"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.04, 0)
material_override = SubResource("StandardMaterial3D_5")
mesh = SubResource("CylinderMesh_2")

[node name="TipHolder" type="MeshInstance3D" parent="PipetteStand/PipetteBody"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.075, 0)
material_override = SubResource("StandardMaterial3D_3")
mesh = SubResource("CylinderMesh_3")

[node name="VolumeDisplay" type="MeshInstance3D" parent="PipetteStand"]
transform = Transform3D(1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 0.04, -0.025)
material_override = SubResource("StandardMaterial3D_4")
mesh = SubResource("BoxMesh_2")

[node name="TipEjector" type="MeshInstance3D" parent="PipetteStand"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.025, 0.02, 0)
material_override = SubResource("StandardMaterial3D_5")
mesh = SubResource("CylinderMesh_2")

[node name="InteractionArea" type="Area3D" parent="."]

[node name="CollisionShape3D" type="CollisionShape3D" parent="InteractionArea"]
shape = SubResource("BoxShape3D_1")
