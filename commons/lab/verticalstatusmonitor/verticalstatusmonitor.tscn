[gd_scene load_steps=12 format=3 uid="uid://bk7yam2n4p5q8"]

[sub_resource type="GDScript" id="GDScript_1"]
script/source = "extends Node3D
 

func _ready():
	# Connect to GameManager if available
	if GameManager:
		GameManager.console_message_added.connect(_on_console_message_added)
		GameManager.health_updated.connect(_on_health_updated)
		GameManager.score_updated.connect(_on_score_updated)
	
	# Start screen animation
	_animate_screen()

func _on_console_message_added(message_data: Dictionary):
	print(\"Monitor received: %s\" % message_data.text)
	# Could flash screen or change colors based on message type

func _on_health_updated(new_health: float):
	# Update screen color based on health
	var health_percent = new_health / 100.0
	var screen = $KioskBody/ScreenFrame/Screen
	if screen and screen.material_override:
		var mat = screen.material_override as StandardMaterial3D
		if health_percent < 0.3:
			mat.emission = Color.RED * 0.8
		elif health_percent < 0.6:
			mat.emission = Color.YELLOW * 0.6
		else:
			mat.emission = Color.GREEN * 0.4

func _on_score_updated(new_score: int):
	print(\"Score display: %d\" % new_score)

func _animate_screen():
	var tween = create_tween()
	tween.set_loops()
	var screen = $KioskBody/ScreenFrame/Screen
	if screen and screen.material_override:
		var mat = screen.material_override as StandardMaterial3D
		tween.tween_method(_update_screen_brightness, 0.2, 0.8, 2.0)
		tween.tween_method(_update_screen_brightness, 0.8, 0.2, 2.0)

func _update_screen_brightness(value: float):
	var screen = $KioskBody/ScreenFrame/Screen
	if screen and screen.material_override:
		var mat = screen.material_override as StandardMaterial3D
		mat.emission_energy_multiplier = value
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1"]
albedo_color = Color(0.2, 0.25, 0.3, 1)
metallic = 0.8
roughness = 0.3

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_2"]
albedo_color = Color(0.1, 0.1, 0.15, 1)
metallic = 0.9
roughness = 0.1
emission_enabled = true
emission = Color(0, 0.8, 0.3, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3"]
albedo_color = Color(0, 0.2, 0.4, 1)
emission_enabled = true
emission = Color(0, 0.3, 0.8, 1)
emission_energy_multiplier = 0.5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_4"]
albedo_color = Color(0.8, 0.8, 0.85, 1)
metallic = 0.6
roughness = 0.4
emission_enabled = true
emission = Color(1, 0.3, 0, 1)
emission_energy_multiplier = 0.5

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_5"]
albedo_color = Color(0, 1, 0.2, 1)
emission_enabled = true
emission = Color(0, 0.8, 0.1, 1)
emission_energy_multiplier = 0.3

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_6"]
albedo_color = Color(1, 0.3, 0, 1)
emission_enabled = true
emission = Color(1, 0.2, 0, 1)
emission_energy_multiplier = 0.4

[sub_resource type="BoxShape3D" id="BoxShape3D_1"]
size = Vector3(1.5, 2.5, 1)

[sub_resource type="Animation" id="Animation_1"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("KioskBody/StatusLights/StatusLight1:light_energy")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.5]
}

[sub_resource type="Animation" id="Animation_2"]
resource_name = "status_blink"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("KioskBody/StatusLights/StatusLight1:light_energy")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1, 2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [0.2, 0.8, 0.2]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("KioskBody/StatusLights/StatusLight2:light_energy")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.5, 1, 1.5, 2),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 0,
"values": [0.8, 0.2, 0.6, 0.9, 0.3]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_1"]
_data = {
&"RESET": SubResource("Animation_1"),
&"status_blink": SubResource("Animation_2")
}

[node name="CSGMonitorKiosk" type="Node3D"]
script = SubResource("GDScript_1")

[node name="KioskBody" type="CSGCombiner3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
material_override = SubResource("StandardMaterial3D_1")

[node name="MainBase" type="CSGBox3D" parent="KioskBody"]
size = Vector3(0.8, 2, 0.6)

[node name="BaseStand" type="CSGCylinder3D" parent="KioskBody"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.2, 0)
height = 0.4

[node name="ScreenFrame" type="CSGCombiner3D" parent="KioskBody"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.2, 0.25)
material_override = SubResource("StandardMaterial3D_2")

[node name="OuterFrame" type="CSGBox3D" parent="KioskBody/ScreenFrame"]
size = Vector3(0.7, 0.9, 0.15)

[node name="ScreenCutout" type="CSGBox3D" parent="KioskBody/ScreenFrame"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.100635, 0.02)
operation = 2
size = Vector3(0.6, 0.59873, 0.2)

[node name="Screen" type="CSGBox3D" parent="KioskBody/ScreenFrame"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.05)
material_override = SubResource("StandardMaterial3D_3")
size = Vector3(0.58, 0.78, 0.02)

[node name="ControlPanel" type="CSGCombiner3D" parent="KioskBody"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.6, 0.32)
material_override = SubResource("StandardMaterial3D_4")

[node name="PanelBase" type="CSGBox3D" parent="KioskBody/ControlPanel"]
size = Vector3(0.5, 0.3, 0.1)

[node name="ButtonHole1" type="CSGCylinder3D" parent="KioskBody/ControlPanel"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.15, 0, 0.02)
operation = 2
height = 0.15

[node name="ButtonHole2" type="CSGCylinder3D" parent="KioskBody/ControlPanel"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.02)
operation = 2
height = 0.15

[node name="ButtonHole3" type="CSGCylinder3D" parent="KioskBody/ControlPanel"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.15, 0, 0.02)
operation = 2
height = 0.15

[node name="Button1" type="CSGCylinder3D" parent="KioskBody/ControlPanel"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.15, 0, 0.08)
material_override = SubResource("StandardMaterial3D_5")
height = 0.06

[node name="Button2" type="CSGCylinder3D" parent="KioskBody/ControlPanel"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.08)
material_override = SubResource("StandardMaterial3D_5")
height = 0.06

[node name="Button3" type="CSGCylinder3D" parent="KioskBody/ControlPanel"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.15, 0, 0.08)
material_override = SubResource("StandardMaterial3D_6")
height = 0.06

[node name="StatusLights" type="Node3D" parent="KioskBody"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.8, 0.32)

[node name="StatusLight1" type="OmniLight3D" parent="KioskBody/StatusLights"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.2, 0, 0)
light_color = Color(0, 1, 0.2, 1)
light_energy = 0.5
omni_range = 1.5

[node name="LightVisual1" type="CSGSphere3D" parent="KioskBody/StatusLights/StatusLight1"]
material_override = SubResource("StandardMaterial3D_5")
radius = 0.03
radial_segments = 8

[node name="StatusLight2" type="OmniLight3D" parent="KioskBody/StatusLights"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.2, 0, 0)
light_color = Color(0, 0.8, 1, 1)
light_energy = 0.6
omni_range = 1.5

[node name="LightVisual2" type="CSGSphere3D" parent="KioskBody/StatusLights/StatusLight2"]
material_override = SubResource("StandardMaterial3D_3")
radius = 0.03
radial_segments = 8

[node name="InteractionArea" type="Area3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)

[node name="CollisionShape3D" type="CollisionShape3D" parent="InteractionArea"]
shape = SubResource("BoxShape3D_1")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_1")
}
autoplay = "status_blink"

[connection signal="body_entered" from="InteractionArea" to="." method="_on_interaction_area_body_entered"]
[connection signal="body_exited" from="InteractionArea" to="." method="_on_interaction_area_body_exited"]
